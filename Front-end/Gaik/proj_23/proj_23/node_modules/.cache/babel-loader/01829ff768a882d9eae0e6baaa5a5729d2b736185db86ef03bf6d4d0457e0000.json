{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grisha\\\\Telran\\\\Front-end\\\\Gaik\\\\proj_23\\\\proj_23\\\\src\\\\components\\\\App\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport ToDoList from \"../ToDoList/ToDoList\";\nimport React, { useEffect, useState } from 'react';\nimport context from '../../context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const List = [\n  //   {id: 1, title: 'поесть', done: 1},\n  //   {id: 2, title: 'позаниматься', done: 1},\n  //   {id: 3, title: 'погулять', done: 0},\n  //   {id: 4, title: 'встретиться с друзьями', done: 1},\n  //   {id: 5, title: 'поспать', done: 0}\n  // ];\n\n  const [todoList, setTodoList] = useState([]);\n\n  // useEffect(() =>{\n  //   fetch('https://jsonplaceholder.typicode.com/todos')\n  //   .then(resp => resp.json())\n  //   .then(data => setTodoList(data.map(({id, title, complited}) =>({id, title, done: completed}))))\n  // }, []);\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch('https://jsonplaceholder.typicode.com/todos');\n      const data = await resp.json();\n      const clearData = data.map(_ref => {\n        let {\n          id,\n          title,\n          complited\n        } = _ref;\n        return {\n          id,\n          title,\n          done: completed\n        };\n      });\n      setTodoList(clearData);\n    })();\n  }, []);\n  const remove = delId => setTodoList(todoList.filter(_ref2 => {\n    let {\n      id\n    } = _ref2;\n    return id !== delId;\n  }));\n  const StatusDone = id => {\n    const newState = todoList.map(el => {\n      if (el.id === id) {\n        el.done = el.done === 1 ? 0 : 1;\n      }\n      return el;\n    });\n    setTodoList(newState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(context.Provider, {\n      value: {\n        todoList,\n        StatusDone,\n        remove\n      },\n      children: /*#__PURE__*/_jsxDEV(ToDoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hGGsNTuaOn7oyphipNa0xsYj1Yc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ToDoList","React","useEffect","useState","context","jsxDEV","_jsxDEV","App","_s","todoList","setTodoList","resp","fetch","data","json","clearData","map","_ref","id","title","complited","done","completed","remove","delId","filter","_ref2","StatusDone","newState","el","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Grisha/Telran/Front-end/Gaik/proj_23/proj_23/src/components/App/index.jsx"],"sourcesContent":["import ToDoList from \"../ToDoList/ToDoList\";\nimport React, { useEffect, useState } from 'react'\nimport context  from '../../context';\n\nfunction App() {\n\n  // const List = [\n  //   {id: 1, title: 'поесть', done: 1},\n  //   {id: 2, title: 'позаниматься', done: 1},\n  //   {id: 3, title: 'погулять', done: 0},\n  //   {id: 4, title: 'встретиться с друзьями', done: 1},\n  //   {id: 5, title: 'поспать', done: 0}\n  // ];\n  \n  const [todoList, setTodoList] = useState([]);\n\n  // useEffect(() =>{\n  //   fetch('https://jsonplaceholder.typicode.com/todos')\n  //   .then(resp => resp.json())\n  //   .then(data => setTodoList(data.map(({id, title, complited}) =>({id, title, done: completed}))))\n  // }, []);\n\n  useEffect(() => {\n  (async () => {\n    const resp = await fetch('https://jsonplaceholder.typicode.com/todos');\n    const data = await resp.json();\n    const clearData = data.map(({id, title, complited}) => ({id, title, done: completed}));\n    setTodoList(clearData);\n  })();   \n}, []);\n\n  \n  const remove = (delId) => setTodoList(todoList.filter(({id}) => id !== delId));\n  \n  const StatusDone = (id) => {\n    const newState = todoList.map(el => {\n        if(el.id === id){\n        el.done = el.done === 1 ? 0 : 1;\n        }\n        return el\n    })\n    setTodoList(newState);\n  }\n\n  return (\n    <div>\n      <context.Provider value={{todoList, StatusDone, remove}}>\n        <ToDoList/>\n      </context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IAChB,CAAC,YAAY;MACX,MAAMS,IAAI,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;MACtE,MAAMC,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;MAC9B,MAAMC,SAAS,GAAGF,IAAI,CAACG,GAAG,CAACC,IAAA;QAAA,IAAC;UAACC,EAAE;UAAEC,KAAK;UAAEC;QAAS,CAAC,GAAAH,IAAA;QAAA,OAAM;UAACC,EAAE;UAAEC,KAAK;UAAEE,IAAI,EAAEC;QAAS,CAAC;MAAA,CAAC,CAAC;MACtFZ,WAAW,CAACK,SAAS,CAAC;IACxB,CAAC,GAAG;EACN,CAAC,EAAE,EAAE,CAAC;EAGJ,MAAMQ,MAAM,GAAIC,KAAK,IAAKd,WAAW,CAACD,QAAQ,CAACgB,MAAM,CAACC,KAAA;IAAA,IAAC;MAACR;IAAE,CAAC,GAAAQ,KAAA;IAAA,OAAKR,EAAE,KAAKM,KAAK;EAAA,EAAC,CAAC;EAE9E,MAAMG,UAAU,GAAIT,EAAE,IAAK;IACzB,MAAMU,QAAQ,GAAGnB,QAAQ,CAACO,GAAG,CAACa,EAAE,IAAI;MAChC,IAAGA,EAAE,CAACX,EAAE,KAAKA,EAAE,EAAC;QAChBW,EAAE,CAACR,IAAI,GAAGQ,EAAE,CAACR,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MAC/B;MACA,OAAOQ,EAAE;IACb,CAAC,CAAC;IACFnB,WAAW,CAACkB,QAAQ,CAAC;EACvB,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,eACExB,OAAA,CAACF,OAAO,CAAC2B,QAAQ;MAACC,KAAK,EAAE;QAACvB,QAAQ;QAAEkB,UAAU;QAAEJ;MAAM,CAAE;MAAAO,QAAA,eACtDxB,OAAA,CAACN,QAAQ;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACf;AAEV;AAAC5B,EAAA,CA/CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}