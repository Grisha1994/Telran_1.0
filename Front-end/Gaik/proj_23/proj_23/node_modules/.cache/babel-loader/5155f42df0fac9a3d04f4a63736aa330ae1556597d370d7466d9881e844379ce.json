{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grisha\\\\Telran\\\\Front-end\\\\Gaik\\\\proj_23\\\\proj_23\\\\src\\\\components\\\\App\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport ToDoList from \"../ToDoList/ToDoList\";\nimport React, { useEffect, useState } from 'react';\nimport context from '../../context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const List = [\n  //   {id: 1, title: 'поесть', done: 1},\n  //   {id: 2, title: 'позаниматься', done: 1},\n  //   {id: 3, title: 'погулять', done: 0},\n  //   {id: 4, title: 'встретиться с друзьями', done: 1},\n  //   {id: 5, title: 'поспать', done: 0}\n  // ];\n\n  const [todoList, setTodoList] = useState([]);\n\n  // useEffect(() =>{\n  //   fetch('https://jsonplaceholder.typicode.com/todos')\n  //   .then(resp => resp.json())\n  //   .then(data => setTodoList(data.map(({id, title, complited}) =>({id, title, done: complited}))))\n  // }, []);\n\n  useEffect(() => {\n    const hendler = async () => {\n      const resp = await fetch('https://jsonplaceholder.typicode.com/todos');\n    };\n    fetch('https://jsonplaceholder.typicode.com/todos').then(resp => resp.json()).then(data => setTodoList(data.map(_ref => {\n      let {\n        id,\n        title,\n        complited\n      } = _ref;\n      return {\n        id,\n        title,\n        done: complited\n      };\n    })));\n  }, []);\n  const remove = delId => setTodoList(todoList.filter(_ref2 => {\n    let {\n      id\n    } = _ref2;\n    return id !== delId;\n  }));\n  const StatusDone = id => {\n    const newState = todoList.map(el => {\n      if (el.id === id) {\n        el.done = el.done === 0 ? 1 : 0;\n      }\n      return el;\n    });\n    setTodoList(newState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(context.Provider, {\n      value: {\n        todoList,\n        StatusDone,\n        remove\n      },\n      children: /*#__PURE__*/_jsxDEV(ToDoList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hGGsNTuaOn7oyphipNa0xsYj1Yc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ToDoList","React","useEffect","useState","context","jsxDEV","_jsxDEV","App","_s","todoList","setTodoList","hendler","resp","fetch","then","json","data","map","_ref","id","title","complited","done","remove","delId","filter","_ref2","StatusDone","newState","el","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Grisha/Telran/Front-end/Gaik/proj_23/proj_23/src/components/App/index.jsx"],"sourcesContent":["import ToDoList from \"../ToDoList/ToDoList\";\nimport React, { useEffect, useState } from 'react'\nimport context  from '../../context';\n\nfunction App() {\n\n  // const List = [\n  //   {id: 1, title: 'поесть', done: 1},\n  //   {id: 2, title: 'позаниматься', done: 1},\n  //   {id: 3, title: 'погулять', done: 0},\n  //   {id: 4, title: 'встретиться с друзьями', done: 1},\n  //   {id: 5, title: 'поспать', done: 0}\n  // ];\n  \n  const [todoList, setTodoList] = useState([]);\n\n  // useEffect(() =>{\n  //   fetch('https://jsonplaceholder.typicode.com/todos')\n  //   .then(resp => resp.json())\n  //   .then(data => setTodoList(data.map(({id, title, complited}) =>({id, title, done: complited}))))\n  // }, []);\n\n  useEffect(() =>{\n    const hendler = async () => {\n      const resp = await fetch('https://jsonplaceholder.typicode.com/todos')\n    }\n    fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(resp => resp.json())\n    .then(data => setTodoList(data.map(({id, title, complited}) =>({id, title, done: complited}))))\n  }, []);\n\n  \n  const remove = (delId) => setTodoList(todoList.filter(({id}) => id !== delId));\n  \n  const StatusDone = (id) => {\n    const newState = todoList.map(el => {\n        if(el.id === id){\n        el.done = el.done === 0 ? 1 : 0;\n        }\n        return el\n    })\n    setTodoList(newState);\n  }\n\n  return (\n    <div>\n      <context.Provider value={{todoList, StatusDone, remove}}>\n        <ToDoList/>\n      </context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAK;IACb,MAAMS,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;IACxE,CAAC;IACDA,KAAK,CAAC,4CAA4C,CAAC,CAClDC,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACG,IAAI,EAAE,CAAC,CACzBD,IAAI,CAACE,IAAI,IAAIN,WAAW,CAACM,IAAI,CAACC,GAAG,CAACC,IAAA;MAAA,IAAC;QAACC,EAAE;QAAEC,KAAK;QAAEC;MAAS,CAAC,GAAAH,IAAA;MAAA,OAAK;QAACC,EAAE;QAAEC,KAAK;QAAEE,IAAI,EAAED;MAAS,CAAC;IAAA,CAAC,CAAC,CAAC,CAAC;EACjG,CAAC,EAAE,EAAE,CAAC;EAGN,MAAME,MAAM,GAAIC,KAAK,IAAKd,WAAW,CAACD,QAAQ,CAACgB,MAAM,CAACC,KAAA;IAAA,IAAC;MAACP;IAAE,CAAC,GAAAO,KAAA;IAAA,OAAKP,EAAE,KAAKK,KAAK;EAAA,EAAC,CAAC;EAE9E,MAAMG,UAAU,GAAIR,EAAE,IAAK;IACzB,MAAMS,QAAQ,GAAGnB,QAAQ,CAACQ,GAAG,CAACY,EAAE,IAAI;MAChC,IAAGA,EAAE,CAACV,EAAE,KAAKA,EAAE,EAAC;QAChBU,EAAE,CAACP,IAAI,GAAGO,EAAE,CAACP,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MAC/B;MACA,OAAOO,EAAE;IACb,CAAC,CAAC;IACFnB,WAAW,CAACkB,QAAQ,CAAC;EACvB,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,eACExB,OAAA,CAACF,OAAO,CAAC2B,QAAQ;MAACC,KAAK,EAAE;QAACvB,QAAQ;QAAEkB,UAAU;QAAEJ;MAAM,CAAE;MAAAO,QAAA,eACtDxB,OAAA,CAACN,QAAQ;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACf;AAEV;AAAC5B,EAAA,CA/CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}