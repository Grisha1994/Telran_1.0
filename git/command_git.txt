
	(1) Создать новый репо (выполняется только один раз,
          создать новую базу данных для истории разработки)
		git init
	
	(2) "Взять на контроль" все файлы проекта (рекурсивно)
           (git remote add origin)
            
		git add . (сделать файл отслеж.)

		
	(3) Выполнить сохранение/фиксацию
		(создать точку восстановления в проекте)
		git commit -m 'какое-то описание'
	
	(4) Создать новый репо на GitHub
		(открыть браузер и перейти в создание нового репозитория)
	
	(5) Сделать "привязку" между локальным репо и репо на GitHub
		(делается один раз для нового репозитория)
		(скопировать комманду с GitHub)
		
      (6) Выгрузить локальный репозиторий на GitHub
		git push -u origin master (main) репозитория

	GIT - программа
	GITHUB - интернет-площадка
	GITHUB PAGES - интернет-сервис (бесплатный хостинг)


	git branch (посмотреть список веток)
	по умолчанию ветка одна - master
	ветка - это еще одна версия проекта
	
	git clone ссылка (выгрузить репо с GH на компьютер)
	
	git branch -D ветка (удалить ветку в локальном репо)
		(перед удаление с нее нужно уйти)
	
	git push origin --delete ветка (удалить ветку на GH)

      git log (посмотреть журнал)
      git log --oneline (посмотреть сокращенный журнал)

      git diff (посмотреть разницу между раб/каталогом и индексом)

      git status (отображает состояние рабочего каталога и раздела проиндексированных файлов)
      git status -s (сжатый вывод)

      Проект - кодовая база
      Репозиторий - файловая БД с историей разработки по проекту (.git/)\

      (!) ДЕСТРУКТИВНАЯ КОМАНДА - НЕ ВЫПОЛНЯТЬ ЕСЛИ НЕ ЗНАЕШЬ ЧТО ДЕЛАЕТ (!)
	rm -rf .git

  	cat ~/.ssh/id_rsa.pub
	ssh-keygen -t rsa

      git pull -
	git merge - объединение веток
      nano .gitignore - создание файла где будут игнорироваться нами вписанные файлы
      git log --oneline --graph --decorate --all

      git branch -v - показывакт какие ветки и на какой ветке нахожусь 
	git commit --amend -m (имя нового комита) - исправить комит
      git reset HEAD~1(1 - на какое количество комитов вернуться)
       - откатить комит на предыдущий(-е)
      git checkout (имя ветки)- переход на ветку
      git checkout . - отмена изменений до последнего комита
      git checkout -b  - создание новой ветки и автомотически на нее переключактся
      git checkout master(main) - возврат на свою ветку
      git clean -xdn  - покажет какие файлы подлежат удалению
      git clean -xdf (имя файла) - удалит все файлы указанной папки
      git restore --staged (имя файла) вернет в обратное состояния до команды git add .
      git config --global -l     core.editor=
	git merge - выполняет слияние отдельных направлений разработки, созданных с
      помощью команды git branch , в единую ветку
